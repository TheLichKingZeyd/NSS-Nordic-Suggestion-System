// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NordicDoorSuggestionSystem.DataAccess;

#nullable disable

namespace bacit_dotnet.MVC.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221103093635_DatabaseV1")]
    partial class DatabaseV1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.CommentEntity", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentTime")
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("EmployeeEntityEmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("SgstnID")
                        .HasColumnType("int");

                    b.Property<int>("SuggestionEntitySgstnID")
                        .HasColumnType("int");

                    b.HasKey("CommentID");

                    b.HasIndex("EmployeeEntityEmployeeNumber");

                    b.HasIndex("SuggestionEntitySgstnID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.DepartmentEntity", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DepartmentLeader")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.EmployeeEntity", b =>
                {
                    b.Property<int>("EmployeeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AccountState")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<ushort?>("SgstnCount")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Team")
                        .HasColumnType("longtext");

                    b.Property<int>("TeamEntityTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("EmployeeNumber");

                    b.HasIndex("TeamEntityTeamID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.MediaEntity", b =>
                {
                    b.Property<int>("MediaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EmployeeEntityEmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("SgstnID")
                        .HasColumnType("longtext");

                    b.Property<int>("SuggestionEntitySgstnID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<byte[]>("UploadedFile")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.HasKey("MediaID");

                    b.HasIndex("EmployeeEntityEmployeeNumber");

                    b.HasIndex("SuggestionEntitySgstnID");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.SgstnReasonEntity", b =>
                {
                    b.Property<int>("ReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ReasonForDenial")
                        .HasColumnType("longtext");

                    b.HasKey("ReasonID");

                    b.ToTable("SgstnReason");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.SuggestionEntity", b =>
                {
                    b.Property<int>("SgstnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<int>("EmployeeEntityEmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Goal")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasMediaAttachments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasReasoning")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ProbDescr")
                        .HasColumnType("longtext");

                    b.Property<short?>("Progress")
                        .HasColumnType("smallint");

                    b.Property<string>("Solution")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubmissionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TeamEntityTeamID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("SgstnID");

                    b.HasIndex("EmployeeEntityEmployeeNumber");

                    b.HasIndex("TeamEntityTeamID");

                    b.ToTable("Suggestion");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.TeamEntity", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DepartmentEntityDepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("TeamLeader")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<ushort?>("TeamSgstnCount")
                        .HasColumnType("smallint unsigned");

                    b.HasKey("TeamID");

                    b.HasIndex("DepartmentEntityDepartmentID");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.CommentEntity", b =>
                {
                    b.HasOne("NordicDoorSuggestionSystem.Entities.EmployeeEntity", "EmployeeEntity")
                        .WithMany()
                        .HasForeignKey("EmployeeEntityEmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NordicDoorSuggestionSystem.Entities.SuggestionEntity", "SuggestionEntity")
                        .WithMany()
                        .HasForeignKey("SuggestionEntitySgstnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEntity");

                    b.Navigation("SuggestionEntity");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("NordicDoorSuggestionSystem.Entities.TeamEntity", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.MediaEntity", b =>
                {
                    b.HasOne("NordicDoorSuggestionSystem.Entities.EmployeeEntity", "EmployeeEntity")
                        .WithMany()
                        .HasForeignKey("EmployeeEntityEmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NordicDoorSuggestionSystem.Entities.SuggestionEntity", "SuggestionEntity")
                        .WithMany()
                        .HasForeignKey("SuggestionEntitySgstnID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEntity");

                    b.Navigation("SuggestionEntity");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.SuggestionEntity", b =>
                {
                    b.HasOne("NordicDoorSuggestionSystem.Entities.EmployeeEntity", "EmployeeEntity")
                        .WithMany()
                        .HasForeignKey("EmployeeEntityEmployeeNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NordicDoorSuggestionSystem.Entities.TeamEntity", "TeamEntity")
                        .WithMany()
                        .HasForeignKey("TeamEntityTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeEntity");

                    b.Navigation("TeamEntity");
                });

            modelBuilder.Entity("NordicDoorSuggestionSystem.Entities.TeamEntity", b =>
                {
                    b.HasOne("NordicDoorSuggestionSystem.Entities.DepartmentEntity", "DepartmentEntity")
                        .WithMany()
                        .HasForeignKey("DepartmentEntityDepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
